AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  simple-websockets-chat-app

  SAM Template for simple-websockets-chat-app that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Resources:

  #################### NAT, to give VPC lambda access to APIG
  # NAT
  GatewayNAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: eipalloc-045a84dd57b95dde7
      SubnetId: subnet-7e1f7c50

  # Route Table for NAT
  RouteTableNAT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-d32594a9
  SubnetRouteTableAssociationNAT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-7e1f7c50
      RouteTableId: !Ref RouteTableNAT
  RouteNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableNAT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: igw-553dd92e
  # Route Table for Non-NAT subnets
  RouteTableLambda:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-d32594a9
  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-7a983044
      RouteTableId: !Ref RouteTableLambda
  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-9237699d
      RouteTableId: !Ref RouteTableLambda
  SubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-b5380cff
      RouteTableId: !Ref RouteTableLambda
  SubnetRouteTableAssociationD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-d310718f
      RouteTableId: !Ref RouteTableLambda
  SubnetRouteTableAssociationE:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-ef3f5b88
      RouteTableId: !Ref RouteTableLambda
  RouteLambda:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableLambda
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: igw-553dd92e

  #################
  # ElasticCache
  ElasticacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticache Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '11211'
          ToPort: '11211'
  ElasticacheCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      AutoMinorVersionUpgrade: 'true'
      Engine: memcached
      CacheNodeType: cache.t3.micro
      NumCacheNodes: '1'
      VpcSecurityGroupIds:
        - !GetAtt
          - ElasticacheSecurityGroup
          - GroupId

  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-SimpleChatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      ApiKeySelectionExpression: $request.header.x-api-key

  # onConnect
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  # onDisconnect
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  # onSend
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  # Common handler functions for all routeKeys
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: built
      Handler: sendmessage/app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Layers:
        - !Ref SendMessageFunctionLibsLayer
      Environment:
        Variables:
          CACHE_ADDRESS: !GetAtt ElasticacheCluster.ConfigurationEndpoint.Address
          CACHE_PORT: !GetAtt ElasticacheCluster.ConfigurationEndpoint.Port
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt
            - ElasticacheSecurityGroup
            - GroupId
        SubnetIds:
          - subnet-7a983044
          - subnet-9237699d
          - subnet-b5380cff
          - subnet-d310718f
          - subnet-ef3f5b88
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunctionLibsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SendMessageFunctionLibsLayer
      Description: Dependencies for the SendMessageFunction
      ContentUri: lib/.
      CompatibleRuntimes:
        - nodejs12.x
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket

Outputs:

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Sub wss://${SimpleChatWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
